@manual{intel2017man,
  author       = {{Intel Corporation}},
  title        = {Intel 64 and IA-32 Architectures Software Developer’s Manual},
  year         = {2016},
  month        = apr,
  organization = {Intel Corporation},
  note         = {\url{http://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html},
                  visited 2017-08-19}
}
@book{lut,
  author    = {Lalonde and Paul and Dawson and Robert },
  title     = {Graphics Gems},
  publisher = {Academic processors},
  year      = {1994},
  note      = { A High-Speed, Low Precision Square Root,p. 424-426,
               visited 2022-01-20}
}
@misc{TaylorseriesApprox,
  author = {Taylor Series Approximation. Brilliant.org.},
  title  = {{Taylor series approximation}},
  year   = {2016},
  note   = {\url{https://brilliant.org/wiki/taylor-series-approximation/?quiz=taylor-series-approximation},
            visited 2021-12-18}
}
@misc{TaylorExpansion,
  author = {Justin Marshall},
  title  = {{Taylor series Expansion}},
  year   = {2021},
  note   = {\url{https://math.libretexts.org/Bookshelves/Analysis/Supplemental_Modules_(Analysis)/Series_and_Expansions/Taylor_Expansion_II},
            visited 2021-12-18}
}
@misc{smallx,
  author = {Sergio Lopez},
  title  = {{Square Root in python}},
  year   = {2021},
  note   = {\url{https://python.plainenglish.io/6-amazing-algorithms-to-get-the-square-root-and-any-root-of-any-number-in-python-3c976ad1ca04},
            visited 2021-12-18}
}
@misc{errortaylor,
  key   = {Error Taylor},
  title = {{Error Bounds in TaylorReihe}},
  year  = {2021},
  note  = {\url{https://brilliant.org/wiki/taylor-series-error-bounds/},
           visited 2021-12-18}
}
@misc{HeronLoesungsansatz,
  author = {Deutsche Mathematiker-Vereinigung},
  title  = {Das Heronverfahren},
  note   = {\url{https://www.mathematik.de/algebra/179-erste-hilfe/zahlenbereiche/reelle-zahlen/2442-das-heronverfahren} ,
            visited 2021-12-20}
}
@book{Heronsconvergence,
  author = { K.G. Binmore},
  title  = {Mathematical Analysis - A Straightforward Approach},
  publisher = {Cambridge University Press},
  year = {1983},
  note   = {Chapter 5: Subsequences, p.43 , subsection 5.5, 
            visited 2022-01-18}
}

@misc{initialguess,
  author = {Rick Wicklin},
  title = {The Babylonian method for finding square roots by hand},
  year = {2016},
  note  = {\url{https://blogs.sas.com/content/iml/2016/05/16/babylonian-square-roots.html} ,
          visited 2021-12-23}
}
@book{HeronsGenauigkeit,
  author    = {L.Ridgway Scott},
  title     = {Numerical Analysis},
  publisher = {Princeton University Press, 41 William Street,
               Princeton, New Jersey 08540},
  year      = {2011},
  note      = {Chapter 1: Numerical Algorithms ,p. 5-6,
               visited 2022-01-10}
}
@book{HeronsPerformanz,
  author = {Prof. W. Kahan},
  title  = {Lecture Notes On The Status of IEEE Standard 754 For Binary Floating-Point Arithmetic},
  year   = {1997},
  note   = {Encodings Span and Precision , p3-4,
            visited 2022-01-20}
}
@misc{glibc,
  key  = {sqrt},
  note = {\url{https://sourceware.org/git/?p=glibc.git;a=blob_plain;f=sysdeps/ieee754/dbl-64/e_sqrt.c;hb=abfbdde177c3a7155070dda1b2cdc8292054cc26} ,
          visited 2021-12-23}
}
In diesem Projekt haben wir verschiedene Methoden zur Approximierung der Quadratwurzel und des natürlichen Logarithmus berechnet und implementiert. Als Standard-Implementierung haben wir die Taylorreihe für die beiden Berechnungen gewählt, da sie eine gute Genauigkeit anbieten. 
\\Insgesamt können wir sagen, dass die meisten unserer Implementierungen nicht nur präzise arbeiten, sondern auch sehr schnell sind. Allerdings hat das Remez-Verfahren von allen eine deutlich schlechtere Genauigkeit, wenn die Wahrscheinlichkeit unter 1\% liegt. Wir haben auch festgestellt, dass das Heron-Verfahren bei größeren Eingaben eine viel längere Laufzeit hat. Beide Ansätze können noch verbessert werden. Beim Heron-Verfahren hängt es stark von der anfänglichen Schätzung der Quadratwurzel ab. Wenn es also eine Möglichkeit gäbe, diese besser zu schätzen, dann würde dieses Verfahren sicherlich eine bessere Leistung aufweisen. Da wir beim Remez-Algorithmus Bits zur Bestimmung der Mantisse verwenden, könnten bei sehr langen Zahlen die letzten Bits ignoriert werden, wodurch die Ergebnisse zufällig werden, was zu einem Verlust an Genauigkeit führt.
Dies kann verbessert werden, wenn man x als $m \cdot 10^p$ betrachtet (z.B. $832 \Longrightarrow 8,32 * 10^2$). Es besagt, dass man durch eine einfache Multiplikation und Addition den natürlichen Logarithmus der ursprünglichen Zahl ableiten kann, wenn man die betreffende Zahl so lange durch 10 teilt, bis sie zwischen 1 und 10 liegt, und den natürlichen Logarithmus für diese Zahl berechnet. 

Peformanz mit verschiedenen Iterationen unter Anwendung der Standard-Funktion